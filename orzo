#!/bin/bash

# Help function to display usage information
function help() {
    echo -e "\nUsage: orzo [OPTION] COMMAND [CONTAINER_FOLDER or FOLDER_PATH]"
    echo -e "\nOptions:"
    echo -e "  -f FOLDER_PATH                                       Specify the folder path of the container instead of the container name."
    echo -e "  -a FOLDER_PATH                                       Execute the command in all subdirectories of the specified folder."
    echo -e "\nCommands:"
    echo -e "  setup    CONTAINER_FOLDER                            Set the folder for the container. (Don't use with -a flag)"
    echo -e "  create   CONTAINER_FOLDER                            Create and start the specified container."
    echo -e "  remove   CONTAINER_FOLDER                            Stop and remove the specified container."
    echo -e "  restart  CONTAINER_FOLDER                            Restart the specified container."
    echo -e "  update   CONTAINER_FOLDER                            Update the specified container with the latest image."
    echo -e "  clean    CONTAINER_FOLDER                            Clean up unused Docker images."
    echo -e "\nNOTE: You can specify any valid folder path with the -f option."
}

# Function to check if Docker is installed
function check_docker() {
    if ! command -v docker &> /dev/null; then
        echo -e "Error: Docker is not installed. Please install Docker and try again."
        exit 1
    fi
}

# Function to check if Docker Compose is installed
function check_docker_compose() {
    if ! command -v docker compose &> /dev/null; then
        echo -e "Error: Docker Compose is not installed. Please install Docker Compose and try again."
        exit 1
    fi
}

# Function to execute commands based on the input
function execute() {
    local dir=${1}
    cd "${dir}" 2>/dev/null
    case ${command} in
        setup)
            mkdir -p ${dir} && touch "${dir}/docker-compose.yml" "${dir}/.env"
            ;;
        create)
            docker compose up -d
            ;;
        remove)
            docker compose down
            ;;
        restart)
            docker compose restart
            ;;
        update)
            read -p "Have you checked the GitHub repository for changes? Confirm update (y/n): " confirm
            if [[ "$confirm" =~ ^[yY]|[yY][eE][sS]$ ]]; then
                docker compose pull && docker compose up -d
            else
                echo -e "Aborting..."
            fi 
            ;;
        clean)
            docker image prune -f
            ;;
        *)
            echo -e "ERROR: '${command}' is not a recognized command."
            exit 1
            ;;
    esac
}

# Check for no arguments or --help
[[ $# -lt 1 || "$1" == "--help" ]] && { help; exit 0; }

# Define container directory
dir="/opt/${2}"

# Handle flags and set the directory path
while getopts "haf" opt; do
    dir=${3}
    case ${opt} in
        h)
            help
            exit 0
            ;;
        a)
            command=${2}
            [[ ${command} == "setup" ]] && { echo -e "ERROR: You can't use setup with -a flag."; exit 0; }
            dir=${3:-"/opt/"}
            for sub in "${dir}"/*/; do
                if [[ -d "$sub" ]]; then
                    execute "$sub"
                fi
            done
            exit 0
            ;;
        \?)
            exit 1
            ;;
    esac
done
shift $((OPTIND - 1))

# Define command
command=${1}

# Check if Docker and Docker Compose are installed
check_docker
check_docker_compose

# Execute the command
execute ${dir}
